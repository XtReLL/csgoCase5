type Case {
  id: ID!
  name: String
  price: Int
  rarirty: CaseRarityType
  status: CaseStatusType
  discount: Int
  icon: String
  bank: Int
  bankPercent: Int
  profit: Int
  opened: Int
  categories: [Category]
  items: [Item]
}

type CasesStats {
  opened: Int
}

type CaseItems {
  caseId: ID
  itemId: ID
}
enum CaseRarityType {
  DEFAULT
  PURPLE
  GREEN
  PINK
  ORANGE
  RED
}

enum CaseStatusType {
  ACTIVE
  HIDE
}

type CaseListData {
  data: [Case]!
  pagination: CursorBasedPaginationData!
}

input CreateCaseInput {
  name: String!
  price: Int
  rarirty: CaseRarityType
  status: CaseStatusType
  discount: Int
  icon: String
  bankPercent: Int
  categories: [ID]!
}

input OpenCaseInput {
  id: String!
  count: Int!
}

input CaseSearchInput {
  status: CaseStatusType
}

input AddItemsInCaseInput {
  caseId: ID!
  itemsId: [ID]!
}

input UpdateCaseInput {
  id: ID!
  name: String
  price: Int
  rarirty: CaseRarityType
  status: CaseStatusType
  discount: Int
  icon: String
  bankPercent: Int
  categories: [ID]
}

type Query {
  cases(pagination: Pagination, search: CaseSearchInput): CaseListData!
  case(id: ID!, search: CaseSearchInput): Case!
  casesStats: CasesStats!
}

type Mutation {
  createCase(createCaseInput: CreateCaseInput!): Case!
  updateCase(updateCaseInput: UpdateCaseInput!): Case!
  removeCase(id: ID!): Boolean!
  openCase(openCaseInput: OpenCaseInput!): [Item]
  addItemsInCase(addItemsInCaseInput: AddItemsInCaseInput!): [CaseItems]!
}
